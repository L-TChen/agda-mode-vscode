// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var State__Error$AgdaModeVscode = require("./State__Error.bs.js");
var State__Editor$AgdaModeVscode = require("./State__Editor.bs.js");
var State__Decoration$AgdaModeVscode = require("./State__Decoration.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var ViewM = State__View$AgdaModeVscode.Impl(Editor);
  var DecoM = State__Decoration$AgdaModeVscode.Impl(Editor);
  var EditM = State__Editor$AgdaModeVscode.Impl(Editor);
  var ErroM = State__Error$AgdaModeVscode.Impl(Editor);
  var handle = function (payload) {
    if (typeof payload === "number") {
      return Curry._2(ViewM.displaySuccess, "Compilation Done!", undefined);
    }
    switch (payload.tag | 0) {
      case /* Constraints */0 :
          var payload$1 = payload[0];
          if (payload$1 !== undefined) {
            return Curry._2(ViewM.display, "Constraints", payload$1);
          } else {
            return Curry._2(ViewM.display, "No Constraints", undefined);
          }
      case /* AllGoalsWarnings */1 :
          var body = payload[1];
          var header = payload[0];
          if (body === "nil") {
            return Curry._2(ViewM.displaySuccess, header, undefined);
          } else {
            return Curry._2(ViewM.display, header, body);
          }
      case /* Time */2 :
          return Curry._2(ViewM.display, "Time", payload[0]);
      case /* Error */3 :
          return Curry._2(ViewM.displayError, "Error", payload[0]);
      case /* Intro */4 :
          return Curry._2(ViewM.display, "Intro", payload[0]);
      case /* Auto */5 :
          return Curry._2(ViewM.displaySuccess, "Auto", payload[0]);
      case /* ModuleContents */6 :
          return Curry._2(ViewM.display, "Module Contents", payload[0]);
      case /* SearchAbout */7 :
          return Curry._2(ViewM.display, "Search About", payload[0]);
      case /* WhyInScope */8 :
          return Curry._2(ViewM.display, "Scope info", payload[0]);
      case /* NormalForm */9 :
          return Curry._2(ViewM.display, "Normal form", payload[0]);
      case /* GoalType */10 :
          return Curry._2(ViewM.display, "Goal Type", payload[0]);
      case /* CurrentGoal */11 :
          return Curry._2(ViewM.display, "Current goal", payload[0]);
      case /* InferredType */12 :
          return Curry._2(ViewM.display, "Inferred type", payload[0]);
      case /* Context */13 :
          return Curry._2(ViewM.display, "Context", payload[0]);
      case /* HelperFunction */14 :
          var payload$2 = payload[0];
          return (function (state) {
              return $$Promise.flatMap(Curry._1(Editor.copyToClipboard, payload$2), (function (param) {
                            return Curry._3(ViewM.display, "Helper function (copied to clipboard)", payload$2, state);
                          }));
            });
      case /* Version */15 :
          return Curry._2(ViewM.display, "Version", payload[0]);
      
    }
  };
  var DisplayInfo = {
    handle: handle
  };
  var handle$1 = function (dispatchCommand, sendRequest, response, state) {
    if (typeof response === "number") {
      return $$Promise.resolved(state);
    }
    switch (response.tag | 0) {
      case /* HighlightingInfoDirect */0 :
          return Curry._2(DecoM.add, response[1], state);
      case /* HighlightingInfoIndirect */1 :
          var readFile = Util.promisify((function (prim, prim$1) {
                  Fs.readFile(prim, prim$1);
                  
                }));
          return $$Promise.flatMap($$Promise.Js.toResult($$Promise.Js.fromBsPromise(readFile(response[0]))), (function (content) {
                        if (content.tag) {
                          return $$Promise.resolved(state);
                        }
                        var expressions = Parser$AgdaModeVscode.SExpression.parse(content[0].toString());
                        Belt_Array.keepMap(expressions, (function (error) {
                                if (error.tag) {
                                  return error[0];
                                }
                                
                              }));
                        var annotations = Belt_Array.concatMany(Belt_Array.keepMap(expressions, (function (param) {
                                    if (param.tag) {
                                      return ;
                                    }
                                    var xs = param[0];
                                    if (xs.tag) {
                                      return Highlighting$AgdaModeVscode.parseIndirectHighlightings(xs[0]);
                                    } else {
                                      return [];
                                    }
                                  })));
                        return Curry._2(DecoM.add, annotations, state);
                      }));
      case /* Status */2 :
          return $$Promise.resolved(state);
      case /* JumpToError */3 :
          var path = Curry._1(Editor.getFileName, state.editor);
          if (path !== undefined && path === response[0]) {
            return Curry._2(EditM.setCursor, response[1] - 1 | 0, state);
          } else {
            return $$Promise.resolved(state);
          }
      case /* InteractionPoints */4 :
          return $$Promise.flatMap(Curry._2(EditM.instantiateGoals, response[0], state), EditM.restoreCursor);
      case /* GiveAction */5 :
          var give = response[1];
          var index = response[0];
          var found = Belt_Array.keep(state.goals, (function (goal) {
                  return goal.index === index;
                }));
          var goal = Belt_Array.get(found, 0);
          if (goal === undefined) {
            return Curry._3(ViewM.displayError, "Error: Give failed", "Cannot find goal #" + String(index), state);
          }
          var tmp;
          if (typeof give === "number") {
            tmp = give !== 0 ? $$Promise.resolved(state) : Curry._3(EditM.modifyGoal, goal, (function (content) {
                      return "(" + (content + ")");
                    }), state);
          } else {
            var content = give[0];
            tmp = Curry._3(EditM.modifyGoal, goal, (function (param) {
                    return content.replace(/\\n/g, "\n");
                  }), state);
          }
          return $$Promise.flatMap(tmp, Curry._1(EditM.removeBoundaryAndDestroyGoal, goal));
      case /* MakeCase */6 :
          var lines = response[1];
          var makeCaseType = response[0];
          return Curry._3(EditM.localOrGlobal, (function (goal) {
                        if (makeCaseType) {
                          return $$Promise.flatMap(Curry._3(EditM.replaceWithLambda, goal, lines, state), Curry._1(dispatchCommand, /* Load */0));
                        } else {
                          return $$Promise.flatMap(Curry._3(EditM.replaceWithLines, goal, lines, state), Curry._1(dispatchCommand, /* Load */0));
                        }
                      }), Curry._2(ErroM.handle, /* OutOfGoal */1, state), state);
      case /* SolveAll */7 :
          var solutions = response[0];
          var solveOne = function (param, param$1) {
            var solution = param[1];
            var index = param[0];
            var goals = Belt_Array.keep(state.goals, (function (goal) {
                    return goal.index === index;
                  }));
            var goal = Belt_Array.get(goals, 0);
            if (goal !== undefined) {
              return $$Promise.flatMap(Curry._3(EditM.modifyGoal, goal, (function (param) {
                                return solution;
                              }), state), Curry._1(sendRequest, /* Give */Caml_chrome_debugger.variant("Give", 3, [goal])));
            } else {
              return $$Promise.resolved(state);
            }
          };
          var size = solutions.length;
          if (size === 0) {
            return Curry._3(ViewM.displayError, "No solutions found", undefined, state);
          } else {
            return $$Promise.flatMap($$Promise.map(Util$AgdaModeVscode.oneByOne(Belt_Array.map(solutions, solveOne)), (function (param) {
                              return state;
                            })), Curry._2(ViewM.displaySuccess, String(size) + " goals solved", undefined));
          }
      case /* DisplayInfo */8 :
          return Curry._1(handle(response[0]), state);
      case /* RunningInfo */9 :
          return Curry._3(ViewM.display, "Type-checking", response[1], state);
      
    }
  };
  return {
          State: State,
          $$Request: $$Request,
          ViewM: ViewM,
          DecoM: DecoM,
          EditM: EditM,
          ErroM: ErroM,
          DisplayInfo: DisplayInfo,
          handle: handle$1
        };
}

var Js$prime;

var Js;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Impl = Impl;
/* fs Not a pure module */
