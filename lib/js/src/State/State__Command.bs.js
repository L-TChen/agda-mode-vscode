// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var State__Error$AgdaModeVscode = require("./State__Error.bs.js");
var State__Editor$AgdaModeVscode = require("./State__Editor.bs.js");
var State__Connection$AgdaModeVscode = require("./State__Connection.bs.js");
var State__Decoration$AgdaModeVscode = require("./State__Decoration.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var ConnM = State__Connection$AgdaModeVscode.Impl(Editor);
  var DecoM = State__Decoration$AgdaModeVscode.Impl(Editor);
  var EditM = State__Editor$AgdaModeVscode.Impl(Editor);
  var ErroM = State__Error$AgdaModeVscode.Impl(Editor);
  var ViewM = State__View$AgdaModeVscode.Impl(Editor);
  var handle = function (command, state) {
    var header = Command$AgdaModeVscode.toString(command);
    if (typeof command === "number") {
      switch (command) {
        case /* Load */0 :
            return $$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(Curry._1(EditM.saveEditor, state), EditM.saveCursor), DecoM.removeAll), Curry._2(ConnM.sendRequest, handle, /* Load */0));
        case /* Quit */1 :
            return $$Promise.map($$Promise.flatMap(Curry._1(DecoM.removeAll, state), State.destroy), (function (param) {
                          return state;
                        }));
        case /* Restart */2 :
            console.log("restart");
            return $$Promise.resolved(state);
        case /* Compile */3 :
            return Curry._3(ConnM.sendRequest, handle, /* Compile */1, state);
        case /* ToggleDisplayOfImplicitArguments */4 :
            return Curry._3(ConnM.sendRequest, handle, /* ToggleDisplayOfImplicitArguments */2, state);
        case /* ShowConstraints */5 :
            return Curry._3(ConnM.sendRequest, handle, /* ShowConstraints */3, state);
        case /* ShowGoals */6 :
            return Curry._3(ConnM.sendRequest, handle, /* ShowGoals */4, state);
        case /* NextGoal */7 :
            return Curry._1(EditM.nextGoal, state);
        case /* PreviousGoal */8 :
            return Curry._1(EditM.previousGoal, state);
        case /* Give */9 :
            return Curry._4(EditM.localOrGlobal2, (function (goal, param) {
                          return Curry._3(ConnM.sendRequest, handle, /* Give */Caml_chrome_debugger.variant("Give", 3, [goal]), state);
                        }), (function (goal) {
                          return Curry._5(ViewM.query, header, "expression to give:", undefined, (function (expr) {
                                        return $$Promise.flatMap(Curry._3(EditM.modifyGoal, goal, (function (param) {
                                                          return expr;
                                                        }), state), Curry._2(ConnM.sendRequest, handle, /* Give */Caml_chrome_debugger.variant("Give", 3, [goal])));
                                      }), state);
                        }), Curry._2(ErroM.handle, /* OutOfGoal */1, state), state);
        case /* Refine */10 :
            return Curry._3(EditM.localOrGlobal, (function (goal) {
                          return $$Promise.flatMap(Curry._1(EditM.saveCursor, state), Curry._2(ConnM.sendRequest, handle, /* Refine */Caml_chrome_debugger.variant("Refine", 4, [goal])));
                        }), Curry._2(ErroM.handle, /* OutOfGoal */1, state), state);
        default:
          return $$Promise.resolved(state);
      }
    } else {
      switch (command.tag | 0) {
        case /* SolveConstraints */0 :
            var normalization = command[0];
            return Curry._3(EditM.localOrGlobal, (function (goal) {
                          return Curry._3(ConnM.sendRequest, handle, /* SolveConstraints */Caml_chrome_debugger.variant("SolveConstraints", 0, [
                                        normalization,
                                        goal
                                      ]), state);
                        }), Curry._3(ConnM.sendRequest, handle, /* SolveConstraintsGlobal */Caml_chrome_debugger.variant("SolveConstraintsGlobal", 1, [normalization]), state), state);
        case /* SearchAbout */1 :
            var normalization$1 = command[0];
            return Curry._5(ViewM.query, header, "name:", undefined, (function (expr) {
                          return Curry._3(ConnM.sendRequest, handle, /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 2, [
                                        normalization$1,
                                        expr
                                      ]), state);
                        }), state);
        default:
          return $$Promise.resolved(state);
      }
    }
  };
  return {
          State: State,
          ConnM: ConnM,
          DecoM: DecoM,
          EditM: EditM,
          ErroM: ErroM,
          ViewM: ViewM,
          handle: handle
        };
}

var Js$prime;

var Js;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Impl = Impl;
/* Promise Not a pure module */
