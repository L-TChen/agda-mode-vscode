// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var getOffsets = function (state) {
    return Belt_Array.map(state.goals, (function (goal) {
                  return goal.range[0] + 3 | 0;
                }));
  };
  var pointingAt = function (cursor, state) {
    var cursorOffset = cursor !== undefined ? cursor : Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
    var pointedGoals = Belt_Array.keep(state.goals, (function (goal) {
            if (goal.range[0] <= cursorOffset) {
              return cursorOffset <= goal.range[1];
            } else {
              return false;
            }
          }));
    return Belt_Array.get(pointedGoals, 0);
  };
  var indentationWidth = function (goal, editor) {
    var goalStart = Curry._2(Editor.pointAtOffset, editor, goal.range[0]);
    var lineNo = Curry._1(Editor.Point.line, goalStart);
    var range = Curry._2(Editor.$$Range.make, Curry._2(Editor.Point.make, lineNo, 0), goalStart);
    var textBeforeGoal = Curry._2(Editor.getTextInRange, editor, range);
    var indentedBy = function (s) {
      var n = 0;
      for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
        var match = s.charAt(i);
        var exit = 0;
        switch (match) {
          case "\t" :
          case "\n" :
          case "\f" :
          case "\r" :
          case " " :
              exit = 1;
              break;
          default:
            
        }
        if (exit === 1 && i === n) {
          n = n + 1 | 0;
        }
        
      }
      return n;
    };
    return /* tuple */[
            indentedBy(textBeforeGoal),
            textBeforeGoal,
            range
          ];
  };
  var saveCursor = function (state) {
    var position = Curry._1(Editor.getCursorPosition, state.editor);
    var offset = Curry._2(Editor.offsetAtPoint, state.editor, position);
    state.cursor = offset;
    return $$Promise.resolved(state);
  };
  var saveEditor = function (state) {
    return $$Promise.map(Curry._1(Editor.save, state.editor), (function (param) {
                  return state;
                }));
  };
  return {
          State: State,
          Goal: Goal,
          getOffsets: getOffsets,
          pointingAt: pointingAt,
          indentationWidth: indentationWidth,
          saveCursor: saveCursor,
          saveEditor: saveEditor
        };
}

var Js$prime;

var Js;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Impl = Impl;
/* Promise Not a pure module */
