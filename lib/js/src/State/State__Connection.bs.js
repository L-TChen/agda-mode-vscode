// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var Connection$AgdaModeVscode = require("../Connection.bs.js");
var State__Error$AgdaModeVscode = require("./State__Error.bs.js");
var State__Response$AgdaModeVscode = require("./State__Response.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var ErroM = State__Error$AgdaModeVscode.Impl(Editor);
  var RespM = State__Response$AgdaModeVscode.Impl(Editor);
  var sendRequestToAgda = function (state, request) {
    return $$Promise.mapOk(Curry._1(State.connect, state), (function (connection) {
                  var version = connection.metadata.version;
                  var filepath = Belt_Option.getWithDefault(Curry._1(Editor.getFileName, state.editor), "");
                  var libraryPath = Curry._1(Editor.Config.getLibraryPath, undefined);
                  var highlightingMethod = Curry._1(Editor.Config.getHighlightingMethod, undefined);
                  var backend = Curry._1(Editor.Config.getBackend, undefined);
                  var encoded = Curry._7($$Request.encode, state.editor, version, filepath, backend, libraryPath, highlightingMethod, request);
                  console.log("<<<", encoded);
                  Connection$AgdaModeVscode.send(encoded, connection);
                  return connection;
                }));
  };
  var sendRequest = function (dispatchCommand, request, state) {
    var lastResponses = [];
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        Curry._2(ErroM.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]]), state);
        return ;
      }
      var match = error[0];
      if (match) {
        var error$1 = match[0];
        if (error$1.tag) {
          Curry._2(ErroM.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]]), state);
          return ;
        }
        var response = error$1[0];
        if (response.tag) {
          var response$1 = response[1];
          var priority = response[0];
          console.log(">>> " + (String(priority) + (" " + Response$AgdaModeVscode.toString(response$1))));
          lastResponses.push(/* tuple */[
                priority,
                response$1
              ]);
          return ;
        }
        var response$2 = response[0];
        console.log(">>> " + Response$AgdaModeVscode.toString(response$2));
        Curry._4(RespM.handle, dispatchCommand, (function (param, param$1) {
                return sendRequest(dispatchCommand, param, param$1);
              }), response$2, state);
        return ;
      }
      console.log(">>| ");
      return Curry._1(resolve, undefined);
    };
    return $$Promise.map($$Promise.flatMap($$Promise.tap($$Promise.flatMap(sendRequestToAgda(state, request), (function (connection) {
                              if (connection.tag) {
                                return $$Promise.flatMap(Curry._2(ErroM.handle, connection[0], state), (function (param) {
                                              return promise;
                                            }));
                              }
                              handle.contents = Curry._1(connection[0].emitter.on, handler);
                              return promise;
                            })), (function (param) {
                          return Belt_Option.forEach(handle.contents, (function (f) {
                                        return Curry._1(f, undefined);
                                      }));
                        })), (function (param) {
                      return Util$AgdaModeVscode.oneByOne(Belt_Array.map(lastResponses.sort((function (x, y) {
                                            return Caml_primitive.caml_int_compare(x[0], y[0]);
                                          })), (function (param, param$1) {
                                        return Curry._4(RespM.handle, dispatchCommand, (function (param, param$1) {
                                                      return sendRequest(dispatchCommand, param, param$1);
                                                    }), param[1], state);
                                      })));
                    })), (function (param) {
                  return state;
                }));
  };
  return {
          State: State,
          $$Request: $$Request,
          ErroM: ErroM,
          RespM: RespM,
          sendRequestToAgda: sendRequestToAgda,
          sendRequest: sendRequest
        };
}

var Js$prime;

var Js;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Impl = Impl;
/* Promise Not a pure module */
