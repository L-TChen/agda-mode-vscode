// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var State__Error$AgdaModeVscode = require("./State__Error.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var ErroM = State__Error$AgdaModeVscode.Impl(Editor);
  var sendAgdaRequest = function (defer, state, req) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        Curry._2(ErroM.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]]), state);
        return ;
      }
      var match = error[0];
      if (match) {
        var error$1 = match[0];
        if (error$1.tag) {
          Curry._2(ErroM.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]]), state);
          return ;
        }
        var response = error$1[0];
        if (response.tag) {
          var response$1 = response[1];
          var priority = response[0];
          console.log(">>> " + (String(priority) + (" " + Response$AgdaModeVscode.toString(response$1))));
          return Curry._2(defer, priority, response$1);
        }
        console.log(">>> " + Response$AgdaModeVscode.toString(response[0]));
        return ;
      }
      console.log(">>| ");
      return Curry._1(resolve, undefined);
    };
    return $$Promise.tap($$Promise.flatMap(Curry._2(State.sendRequestToAgda, state, req), (function (connection) {
                      if (connection.tag) {
                        return $$Promise.flatMap(Curry._2(ErroM.handle, connection[0], state), (function (param) {
                                      return promise;
                                    }));
                      }
                      handle.contents = Curry._1(connection[0].emitter.on, handler);
                      return promise;
                    })), (function (param) {
                  return Belt_Option.forEach(handle.contents, (function (f) {
                                return Curry._1(f, undefined);
                              }));
                }));
  };
  var sendRequest = function (request, state) {
    return $$Promise.map(sendAgdaRequest((function (param, param$1) {
                      
                    }), state, request), (function (param) {
                  return state;
                }));
  };
  return {
          State: State,
          $$Request: $$Request,
          ErroM: ErroM,
          sendAgdaRequest: sendAgdaRequest,
          sendRequest: sendRequest
        };
}

var Js$prime;

var Js;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Impl = Impl;
/* Promise Not a pure module */
