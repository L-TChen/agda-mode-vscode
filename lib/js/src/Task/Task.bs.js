// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State/State.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var toString = function (cmd) {
    if (typeof cmd === "number") {
      if (cmd === /* Terminate */0) {
        return "Terminate";
      } else {
        return "RemoveAllHighlightings";
      }
    }
    switch (cmd.tag | 0) {
      case /* DispatchCommand */0 :
          return "Command[" + (Command$AgdaModeVscode.toString(cmd[0]) + "]");
      case /* SendRequest */1 :
          return "SendRequest";
      case /* SendEventToView */2 :
          return "SendEventToView";
      case /* SendRequestToView */3 :
          return "SendRequestToView";
      case /* AddHighlightings */4 :
          return "AddHighlightings";
      case /* Error */5 :
          return "Error";
      case /* Goal */6 :
          var tmp = cmd[0];
          if (typeof tmp === "number") {
            switch (tmp) {
              case /* UpdateRange */0 :
                  return "Goal[UpdateRange]";
              case /* Next */1 :
                  return "Goal[Next]";
              case /* Previous */2 :
                  return "Goal[Previous]";
              case /* SaveCursor */3 :
                  return "Goal[SaveCursor]";
              case /* RestoreCursor */4 :
                  return "Goal[RestoreCursor]";
              
            }
          } else {
            switch (tmp.tag | 0) {
              case /* Instantiate */0 :
                  return "Goal[Instantiate]";
              case /* Modify */1 :
                  return "Goal[Modify]";
              case /* SetCursor */2 :
                  return "Goal[SetCursor]";
              case /* RemoveBoundaryAndDestroy */3 :
                  return "Goal[RemoveBoundaryAndDestroy]";
              case /* ReplaceWithLines */4 :
                  return "Goal[ReplaceWithLines]";
              case /* ReplaceWithLambda */5 :
                  return "Goal[ReplaceWithLambda]";
              case /* LocalOrGlobal */6 :
                  return "Goal[LocalOrGlobal]";
              case /* LocalOrGlobal2 */7 :
                  return "Goal[LocalOrGlobal2]";
              
            }
          }
      case /* WithState */7 :
          return "WithState";
      case /* WithStateP */8 :
          return "WithStateP";
      case /* Debug */9 :
          return "Debug[" + (cmd[0] + "]");
      
    }
  };
  var display$prime = function (header, message) {
    if (message !== undefined) {
      return /* SendEventToView */Caml_chrome_debugger.variant("SendEventToView", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                    header,
                    /* Plain */Caml_chrome_debugger.variant("Plain", 0, [message])
                  ])]);
    } else {
      return /* SendEventToView */Caml_chrome_debugger.variant("SendEventToView", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                    header,
                    /* Nothing */0
                  ])]);
    }
  };
  var display = function (header) {
    var partial_arg = /* Plain */Caml_chrome_debugger.variant("Plain", 0, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displayError = function (header) {
    var partial_arg = /* Error */Caml_chrome_debugger.variant("Error", 3, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displayWarning = function (header) {
    var partial_arg = /* Warning */Caml_chrome_debugger.variant("Warning", 2, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displaySuccess = function (header) {
    var partial_arg = /* Success */Caml_chrome_debugger.variant("Success", 1, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var query = function (header, placeholder, value, callbackOnQuerySuccess) {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                      Curry._2(Editor.setContext, "agdaModeQuerying", true);
                      Curry._1(Editor.View.focus, state.view);
                      console.log("focus in");
                      
                    })]),
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SendRequestToView */Caml_chrome_debugger.variant("SendRequestToView", 3, [
                      /* Query */Caml_chrome_debugger.simpleVariant("Query", [
                          header,
                          placeholder,
                          value
                        ]),
                      (function (response) {
                          var tasks;
                          if (typeof response === "number") {
                            if (response !== 0) {
                              var partial_arg = /* Error */Caml_chrome_debugger.variant("Error", 3, ["Query Cancelled"]);
                              tasks = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  display$prime(partial_arg, undefined),
                                  /* [] */0
                                ]);
                            } else {
                              tasks = /* [] */0;
                            }
                          } else {
                            tasks = Curry._1(callbackOnQuerySuccess, response[0]);
                          }
                          return Belt_List.concat(tasks, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                                                Curry._2(Editor.setContext, "agdaModeQuerying", false);
                                                Curry._1(Editor.focus, state.editor);
                                                console.log("focus back");
                                                
                                              })]),
                                        /* [] */0
                                      ]));
                        })
                    ]),
                  /* [] */0
                ])
            ]);
  };
  return {
          State: State,
          Goal: Goal,
          $$Request: $$Request,
          toString: toString,
          display$prime: display$prime,
          display: display,
          displayError: displayError,
          displayWarning: displayWarning,
          displaySuccess: displaySuccess,
          query: query
        };
}

exports.Impl = Impl;
/* Goal-AgdaModeVscode Not a pure module */
